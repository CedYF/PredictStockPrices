# -*- coding: utf-8 -*-
"""Predict Prices

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1m82Q8KTdTxhIFA1hG2Kx3p9aT3jvkX3T
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd

import matplotlib.pyplot as plt
# %matplotlib inline

import sklearn
from sklearn.linear_model import Ridge
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.preprocessing import MinMaxScaler

import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv1D, LSTM, Dense
from keras.callbacks import LearningRateScheduler
from tensorflow.keras.losses import Huber
from keras.optimizers import SGD

!wget -O tesla.csv https://www.dropbox.com/s/na2vurooejpew59/TSLA.csv?dl=1

df = pd.read_csv('tesla.csv')
df.set_index('Date', inplace=True)
df.head()

from sklearn.linear_model import LinearRegression
from sklearn import preprocessing, svm
from sklearn.model_selection import cross_validate
from sklearn.model_selection import train_test_split
from sklearn.linear_model import Ridge
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

#Do Linear Regression

df['prediction'] = df['Adj Close'].shift(-1)
df.dropna(inplace=True)
X = np.array(df.drop(['prediction'], 1))
Y = np.array(df['prediction'])
X = preprocessing.scale(X)
X_prediction = X[-50:]
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.5)
clf = LinearRegression()
clf.fit(X_train, Y_train)
forecast_set = prediction
clfreg = LinearRegression(n_jobs=-1)
clfreg.fit(X_train, Y_train)
confidencereg = clfreg.score(X_test, Y_test)

#Linear Regression
Predict1 = clf.predict(X_prediction)

# Quadratic Regression 2
clfpoly2 = make_pipeline(PolynomialFeatures(2), Ridge())
clfpoly2.fit(X_train,Y_train)
Predict2 = clfpoly2.predict(X_prediction)

# Quadratic Regression 3
clfpoly3 = make_pipeline(PolynomialFeatures(3), Ridge())
clfpoly3.fit(X_train, Y_train)
Predict3 = clfpoly3.predict(X_prediction)

dates = pd.date_range('20190830', periods=len(prediction))
dftest1 = pd.DataFrame(Predict1,index=dates.format(),columns=['Forecast1'])
dftest2 = pd.DataFrame(Predict2,index=dates.format(),columns=['Forecast2'])
dftest3 = pd.DataFrame(Predict3,index=dates.format(),columns=['Forecast3'])
df['Forecast1'] = df['Adj Close']
df['Forecast2'] = df['Adj Close']
df['Forecast3'] = df['Adj Close']
df1 = df.append(dftest1)
df1['Forecast1'].plot(figsize=(16,4))
df1['Adj Close'].plot(figsize=(16,4))
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

#df4.plot(label='TSLA', figsize=(16,8), title='Adjusted Closing Price', grid=True)

df2 = df.append(dftest2)
df2['Forecast2'].plot(figsize=(16,4))
df2['Adj Close'].plot(figsize=(16,4))
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()

df3 = df.append(dftest3)
df3['Forecast3'].plot(figsize=(16,4))
df3['Adj Close'].plot(figsize=(16,4))
plt.legend(loc=4)
plt.xlabel('Date')
plt.ylabel('Price')
plt.show()